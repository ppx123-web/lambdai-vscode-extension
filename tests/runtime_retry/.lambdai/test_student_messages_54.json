[
  {
    "role": "system",
    "content": "# Task\nYou are required to synthesize a python function to finish the following task. The 'target' is user's attention.\n\n## Target\n将GPA小于3.7的学生 {students} 退学返回退学后剩下的学生列表\n\n## Example\n\n### Example 1\n```python\ndef hello_lambdai():\n    \"\"\"\n    Write a function to print \"Hello, World!\"\n    \"\"\"\n    print(\"Hello, World!\")\n```\n\n### Example 2\nThe helper function like `fibonacci` is defined in the top function, rather than in the global scope.\n\n```python\ndef fibonacci_sum_lambdai(a, b):\n    \"\"\"\n    Calculate the sum of two numbers of Fibonacci sequence\n    \"\"\"\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n    return fibonacci(a) + fibonacci(b)\n```\n\n### Example 3\nThe import statement should in the function, rather than in the global scope.\n\n```python\ndef calculate_square_lambdai(a, b):\n    \"\"\"\n    Calculate the square of two numbers\n    \"\"\"\n    import math\n    return math.sqrt(a) + math.sqrt(b)\n```\n\n## Function Signature\n\nYou must keep the function signature, keeping the function arguments number unchanged. \n\ndef function_name(students: list) -> list[test_student.Student]:\n    \"\"\"\n    将GPA小于3.7的学生 {students} 退学返回退学后剩下的学生列表\n    \"\"\"\n\n## Argument Content\nThe arguments content are like:\nstudents: [<test_student.Student object at 0x11f86a750>, <test_student.Student object at 0x11f86aa90>, <test_s...\n\n## Tests\nThe function must satisfy the following tests:\nIn each test, the function will be passed as an argument(lambda expression's argument), with the corresponding input.\n                tests=lambda fn: fn([Student(\"\", \"\", \"\", \"\", 0.0)]) == []\n\n1. The input function must accept a list of dictionaries `students`, where each dictionary represents a student and contains at least a 'GPA' key with a numeric value.\n2. The function must filter out all students whose GPA is less than 3.7, effectively \"expelling\" them.\n3. The function must return a new list containing only the students who have a GPA of 3.7 or higher, preserving the original order of the remaining students.\n\n## Relevant Code\n\nHere are some code you can use:\n['<class: list, from module builtins>\\nclass Student:\\n    def __init__(self, name: str, age: int, student_id: str, major: str, gpa: float):\\n        self.name = name\\n        self.age = age\\n        self.student_id = student_id\\n        self.major = major\\n        self.gpa = gpa\\n        self._enrolled = True\\n        \\n    @property\\n    def is_enrolled(self) -> bool:\\n        return self._enrolled\\n        \\n    def update_gpa(self, new_gpa: float) -> None:\\n        if not 0.0 <= new_gpa <= 4.0:\\n            raise ValueError(\"GPA must be between 0.0 and 4.0\")\\n        self.gpa = new_gpa\\n        \\n    def change_major(self, new_major: str) -> None:\\n        self.major = new_major\\n        \\n    def withdraw(self) -> None:\\n        self._enrolled = False\\n\\n</class>']\n\n## Rules\n- Only generate a top function, other functions should be in the function.\n- You should not define any classes in the global scope.\n- Any type, class, function, module in relevant code must be imported in the function using corresponding module name.\n- Code provided in the `Relevant Code` section have been defined in the global scope. You can use them directly.\n- Code provided in the `Relevant Code` sectioN must not be redefined in your generated code.\n- You can rename function name and arguments name.\n- The function name must end with `_lambdai`.\n- Type annotation in function signature is should be wrapped by like `'type'`\n- Do not hanlde any exception in the function if not explicitly required.\n- import statement should be in the function, not in the global scope.\n- word wrapped by `{}` in the target will be the function arguments name. And must keep the order of the arguments appeared in the target.\n\nAnalysis the target and return the python code in the following format:\n\n```python\n<python code>\n```\n"
  },
  {
    "role": "user",
    "content": "## Target\n\nYour current task is:\n\n将GPA小于3.7的学生 {students} 退学返回退学后剩下的学生列表\n\nAnalysis the target and return the python code in the following format:\n\n```python\n<python code>\n```\n\nYou must follow the rules in the system prompt.\nNow analyze the task and generate the python code."
  },
  {
    "role": "assistant",
    "content": "```python\ndef expel_students_lambdai(students: list) -> list:\n    \"\"\"\n    将GPA小于3.7的学生 {students} 退学返回退学后剩下的学生列表\n    \"\"\"\n    remaining_students = []\n    for student in students:\n        if student.gpa >= 3.7:\n            remaining_students.append(student)\n    return remaining_students\n```"
  }
]