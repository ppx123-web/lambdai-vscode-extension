[
    {
        "prompt": "\u5c06\u8868\u683c'\u59d3\u540d'\u548c'\u5e74\u9f84'\u7684\u6570\u636e {table} \u8f6c\u6362\u4e3aPerson\u5bf9\u8c61,\u8868\u683c\u7b2c\u4e00\u884c\u662f\u8868\u5934\uff0c\u4e4b\u540e\u6bcf\u4e00\u884c\u662f\u5bf9\u5e94\u8868\u5934\u7684\u6570\u636e,\u8fd4\u56dePerson\u5bf9\u8c61\u7684\u5217\u8868",
        "code": "def convert_table_to_persons_lambdai(table: list) -> list:\n    \"\"\"\n    \u5c06\u8868\u683c'\u59d3\u540d'\u548c'\u5e74\u9f84'\u7684\u6570\u636e {table} \u8f6c\u6362\u4e3aPerson\u5bf9\u8c61,\u8868\u683c\u7b2c\u4e00\u884c\u662f\u8868\u5934\uff0c\u4e4b\u540e\u6bcf\u4e00\u884c\u662f\u5bf9\u5e94\u8868\u5934\u7684\u6570\u636e,\u8fd4\u56dePerson\u5bf9\u8c61\u7684\u5217\u8868\n    \"\"\"\n    class Person:\n        def __init__(self, name: str, age: int):\n            self.name = name\n            self.age = age\n    \n    if not table or len(table) <= 1:\n        return []\n    \n    # \u83b7\u53d6\u8868\u5934\n    headers = table[0]\n    \n    # \u67e5\u627e\u59d3\u540d\u548c\u5e74\u9f84\u7684\u5217\u7d22\u5f15\n    name_index = headers.index('\u59d3\u540d')\n    age_index = headers.index('\u5e74\u9f84')\n    \n    persons = []\n    \n    # \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u5904\u7406\u6570\u636e\n    for row in table[1:]:\n        if len(row) > max(name_index, age_index):\n            name = row[name_index]\n            age = int(row[age_index])\n            persons.append(Person(name, age))\n    \n    return persons",
        "error": "The expected return type is list[test_obj.Person], but the function's result type is <class 'list'>\nStack trace:\n  File \"/Users/choi/work/lambdai/src/lambdai/spec/output.py\", line 40, in validate\n    raise TypeMismatchException(\n"
    },
    {
        "prompt": "\u5c06\u8868\u683c'\u59d3\u540d'\u548c'\u5e74\u9f84'\u7684\u6570\u636e {table} \u8f6c\u6362\u4e3aPerson\u5bf9\u8c61,\u8868\u683c\u7b2c\u4e00\u884c\u662f\u8868\u5934\uff0c\u4e4b\u540e\u6bcf\u4e00\u884c\u662f\u5bf9\u5e94\u8868\u5934\u7684\u6570\u636e,\u8fd4\u56dePerson\u5bf9\u8c61\u7684\u5217\u8868",
        "code": "def convert_table_to_persons_lambdai(table: list) -> list:\n    \"\"\"\n    \u5c06\u8868\u683c'\u59d3\u540d'\u548c'\u5e74\u9f84'\u7684\u6570\u636e {table} \u8f6c\u6362\u4e3aPerson\u5bf9\u8c61,\u8868\u683c\u7b2c\u4e00\u884c\u662f\u8868\u5934\uff0c\u4e4b\u540e\u6bcf\u4e00\u884c\u662f\u5bf9\u5e94\u8868\u5934\u7684\u6570\u636e,\u8fd4\u56dePerson\u5bf9\u8c61\u7684\u5217\u8868\n    \"\"\"\n    import test_obj\n    \n    if not table or len(table) <= 1:\n        return []\n    \n    # \u83b7\u53d6\u8868\u5934\n    headers = table[0]\n    \n    # \u67e5\u627e\u59d3\u540d\u548c\u5e74\u9f84\u7684\u5217\u7d22\u5f15\n    name_index = headers.index('\u59d3\u540d')\n    age_index = headers.index('\u5e74\u9f84')\n    \n    persons = []\n    \n    # \u4ece\u7b2c\u4e8c\u884c\u5f00\u59cb\u5904\u7406\u6570\u636e\n    for row in table[1:]:\n        if len(row) > max(name_index, age_index):\n            name = row[name_index]\n            age = int(row[age_index])\n            persons.append(test_obj.Person(name, age))\n    \n    return persons",
        "error": ""
    }
]